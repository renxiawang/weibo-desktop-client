package gt.sina;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import java.util.Timer;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.SoftBevelBorder;

import weibo4j.Comment;
import weibo4j.Count;
import weibo4j.Status;
import weibo4j.User;
import weibo4j.WeiboException;
import weibo4j.org.json.JSONException;
import weibo4j.util.BareBonesBrowserLaunch;
import awtextra.AbsoluteConstraints;
import awtextra.AbsoluteLayout;


public class MainFrame extends javax.swing.JFrame {
	
	
	public SinaCore sinaWeibo = new SinaCore();
	URL myAvatarURL = null;
	URL myHomePage = null;
	String myName = null;
	String myScreenName = null;
	long myFollowingsNum = 0;
	long myFollowersNum = 0;
	long myTweetsNum = 0;
	long friendsFollowingsNum = 0;
	long friendsFollowerNum = 0;
	
	SinaUser myselfUser = null;
	
	SinaUser friendsUser = null;
	
	SinaTweets myTweets = null;
	
	SinaTweets friendsTweets = null;

	Count count = null;
	boolean newTweets = false;
	long newCommentsNum = 0;
	long newMentionsNum = 0;
	long newFollowersNum = 0;
	ImageIcon myAvatar=null;
	long commentId = 0;
	long TweetId = 0;
	public static long latestTweetId = 0;
	
	SinaTweets singleTweet = null;
	boolean isFavouritePanel = false; 
	boolean isCommentToMe = false;
	boolean isFollowerPanel = false;
	Timer timer = new Timer();
	
	
	Home home = new Home();
	Thread homeTread = new Thread(home);

	
	Mention mention = new Mention();
	Thread mentionTread = new Thread(mention);

	
	MyTweet myTweet = new MyTweet();
	Thread myTweetTread = new Thread(myTweet);

	
	Comments comments = new Comments();
	Thread commentsThread = new Thread(comments);

	
	Fav fav = new Fav();
	Thread favThread = new Thread(fav);

	
	Following following = new Following();
	Thread followingThread = new Thread(following);

	
	Follower follower = new Follower();
	Thread followerThread = new Thread(follower);
	
	
    public MainFrame(SinaCore sinaWeibo) throws WeiboException {
       
        this.sinaWeibo = sinaWeibo;
        try {
			this.initVariables();
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WeiboException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		initComponents();
		timer.schedule(new CheckNew(), 1000, 10000);
		
    }
    
    /**
     * //初始化部分变量
     * @throws WeiboException
     * @throws MalformedURLException
     */
    public  void initVariables() throws WeiboException, MalformedURLException {   
    	
    	myselfUser =  sinaWeibo.verifyCredentials();
    	
    	myName = myselfUser.gtGetName();
    	myAvatarURL = myselfUser.gtGetAvatar();
    	myHomePage = myselfUser.gtGetHomePage();
    	myScreenName = myselfUser.gtGetScreenName();
    	myFollowersNum = myselfUser.gtGetFollowersNum();
    	myFollowingsNum = myselfUser.gtGetFollowingsNum();
    	myTweetsNum = myselfUser.gtGetMyTweetsNum();
    	myAvatar = new ImageIcon(myAvatarURL);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * @throws WeiboException 
     */
    private void initComponents() throws WeiboException {

        headingPanel = new JPanel();
        avatarButton1 = new JButton(myAvatar);
        usrNameLabel = new JLabel();
        followingLabel = new JLabel();
        follwerLabel = new JLabel();
        tweetsLabel = new JLabel();
        bodyTabbedPane = new JTabbedPane();
        homeScrollPane = new JScrollPane();
        homePanel = new JPanel();
        tweetPanel = new JPanel();
        // avatarButton2 = new JButton();
        // commentLabel = new JLabel();
        // favouriteLabel = new JLabel();
        mentionScrollPane = new JScrollPane();
        mentionPanel = new JPanel();
        // tweetPanel1 = new JPanel();
        // commentLabel1 = new JLabel();
        myTweetScrollPane = new JScrollPane();
        myTweetPanel = new JPanel();
        // tweetPanel2 = new JPanel();
        // commentLabel2 = new JLabel();
        commentScrollPane = new JScrollPane();
        commentPanel = new JPanel();
        favScrollPane = new JScrollPane();
        favPanel = new JPanel();
        //tweetPanel4 = new JPanel();
        // commentLabel4 = new JLabel();
        followingScrollPane = new JScrollPane();
        followingPanel = new JPanel();
        followerScrollPane = new JScrollPane();
        followerPanel = new JPanel();
        aboutScrollPane = new JScrollPane();
        aboutPanel = new JPanel();
        jScrollPane2 = new JScrollPane();
        jTextArea1 = new JTextArea();
        sendPanel = new JPanel();
        jScrollPane1 = new JScrollPane();
        sendTextArea = new JTextArea();
        sendButton = new JButton();
        MenuButton = new JButton();
        refreshPopupMenu = new JPopupMenu();
        jMenuItem1 = new JMenuItem();
        jMenuItem2 = new JMenuItem();
        jMenuItem3 = new JMenuItem();
        jMenuItem4 = new JMenuItem();
        jMenuItem5 = new JMenuItem();
        jMenuItem6 = new JMenuItem();
        jMenuItem7 = new JMenuItem();
        
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("GodTweet");
        setResizable(false);
//heading panel 1111111111111111111111111111111111111111111111111111111111111111111111111111111111
        headingPanel.setBackground(new Color(0, 210, 251));
        
        avatarButton1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                avatarButton1MouseClicked(evt);
            }
        });
        usrNameLabel.setText(myName);
        MenuButton.setText("Refresh");
        MenuButton.setComponentPopupMenu(refreshPopupMenu);
		MenuButton.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				MenuButtonMouseClicked(evt);
			}
		});
        jMenuItem1.setText("Refresh Home");
        jMenuItem2.setText("Refresh Mention");
        jMenuItem3.setText("Refresh Comment");
        jMenuItem4.setText("Refresh Follower");
        jMenuItem5.setText("Refresh MyTweet");
        jMenuItem6.setText("Refresh Favourite");
        jMenuItem7.setText("Refresh Following");
        
        refreshPopupMenu.add(jMenuItem1);
        refreshPopupMenu.add(jMenuItem2);
        refreshPopupMenu.add(jMenuItem5);
        refreshPopupMenu.add(jMenuItem3);
        refreshPopupMenu.add(jMenuItem6);
        refreshPopupMenu.add(jMenuItem7);
        refreshPopupMenu.add(jMenuItem4);

		jMenuItem1.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				jMenuItem1MousePressed(evt);
			}
		});

		jMenuItem2.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				jMenuItem2MousePressed(evt);
			}
		});

		jMenuItem3.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				jMenuItem3MousePressed(evt);
			}
		});

		jMenuItem4.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				jMenuItem4MousePressed(evt);
			}
		});
		
		jMenuItem5.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				jMenuItem5MousePressed(evt);
			}
		});
        	
		jMenuItem6.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				jMenuItem6MousePressed(evt);
			}
		});
		
		jMenuItem7.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent evt) {
				jMenuItem7MousePressed(evt);
			}
		});
		
        followingLabel.setText("Following: " + myFollowingsNum);
        follwerLabel.setText("Follower: " + myFollowersNum);
        tweetsLabel.setText("Tweets: " + myTweetsNum);
        
        GroupLayout headingPanelLayout = new GroupLayout(headingPanel);
        headingPanel.setLayout(headingPanelLayout);
        headingPanelLayout.setHorizontalGroup(
            headingPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(headingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(avatarButton1, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                .addGroup(headingPanelLayout.createParallelGroup(Alignment.TRAILING)
                    .addGroup(headingPanelLayout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(usrNameLabel)
                        .addGap(180)
                        .addComponent(MenuButton)
                        .addContainerGap(5, Short.MAX_VALUE))
                    .addGroup(headingPanelLayout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(followingLabel)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(follwerLabel)
                        .addGap(12, 12, 12)
                        .addComponent(tweetsLabel)
                        .addContainerGap())))
        );
        headingPanelLayout.setVerticalGroup(
            headingPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(headingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headingPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(usrNameLabel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                    .addComponent(MenuButton)
                    .addGroup(headingPanelLayout.createParallelGroup(Alignment.TRAILING)
                        .addGroup(headingPanelLayout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(followingLabel)
                            .addComponent(follwerLabel)
                            .addComponent(tweetsLabel))
                        .addComponent(avatarButton1, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
//body panel 2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
        bodyTabbedPane.setBackground(new Color(158, 225, 246));
        bodyTabbedPane.setTabPlacement(JTabbedPane.LEFT);
        //homehomehomehomehomehomehomehomehomehomehomehomehomehomehomehomehomehomehomehomehomehomehome
        homeScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        homeTread.start();
        try {
			homeTread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/home.png")), homeScrollPane, ""); // NOI18N
        
        //mentionmentionmentionmentionmentionmentionmentionmentionmentionmentionmentionmentionmentionmention
        mentionScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		mentionTread.start();
		bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/mention.png")), mentionScrollPane); // NOI18N
        
		//myTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweetmyTweet
		myTweetScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		myTweetTread.start();
		bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/tweet.png")), myTweetScrollPane); // NOI18N
        
		//commentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcommentcomment
		commentScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		commentsThread.start();
		bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/comments.png")), commentScrollPane); // NOI18N
        
		//favfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfavfav
		favScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		favThread.start();
        bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/favsmall.png")), favScrollPane); // NOI18N
        
        //followingfollowingfollowingfollowingfollowingfollowingfollowingfollowingfollowingfollowingfollowingfollowing
        followingScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		followingThread.start();
        bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/following.png")), followingScrollPane); // NOI18N
        
        //followerfollowerfollowerfollowerfollowerfollowerfollowerfollowerfollowerfollowerfollowerfollowerfollower
        followerScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        followerThread.start();
        bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/followers.png")), followerScrollPane); // NOI18N
        
        //aboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutabout
        aboutScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        aboutPanel.setBackground(new Color(0, 214, 255));
        
        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBackground(new Color(158, 225, 246));
        jTextArea1.setText("About Information");
        jScrollPane2.setViewportView(jTextArea1);

        GroupLayout aboutPanelLayout = new GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 339, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 310, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        aboutScrollPane.setViewportView(aboutPanel);
        bodyTabbedPane.addTab("", new ImageIcon(getClass().getResource("/image/about.png")), aboutScrollPane); // NOI18N

//send panel333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333
        sendPanel.setBackground(new Color(0, 210, 251));

        sendTextArea.setColumns(20);
        sendTextArea.setRows(5);
        sendTextArea.setLineWrap(true);
        sendTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(sendTextArea);

        sendButton.setText("Send");
        sendButton.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                sendButtonMouseClicked(evt);
            }
        });

        GroupLayout sendPanelLayout = new GroupLayout(sendPanel);
        sendPanel.setLayout(sendPanelLayout);
        sendPanelLayout.setHorizontalGroup(
            sendPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(sendPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sendPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jScrollPane1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                    .addComponent(sendButton, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        sendPanelLayout.setVerticalGroup(
            sendPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(sendPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(sendButton, GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(bodyTabbedPane, 0, 0, Short.MAX_VALUE)
            .addComponent(headingPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sendPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headingPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(bodyTabbedPane, GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(sendPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }

    private void avatarButton1MouseClicked(MouseEvent evt) {
        // TODO add your handling code here: 打开自己的主页
    	BareBonesBrowserLaunch.openURL(myHomePage.toString());
    }

	private void MenuButtonMouseClicked(MouseEvent evt) {
		// TODO add your handling code here: 弹出刷新菜单
		if (evt.getButton() == MouseEvent.BUTTON1) {
			refreshPopupMenu.show(MenuButton, evt.getX(), evt.getY());
		}
	}
    
    private void jMenuItem1MousePressed(MouseEvent evt) {
    	// TODO add your handling code here: 刷新home
    	if(newTweets) {
    		homePanel = new JPanel();
    		homePanel.setBackground(new Color(0, 214, 255));
            homePanel.setPreferredSize(new Dimension(420, 2900));
            Home home = new Home();
        	Thread homeTread = new Thread(home);
    		
        	homeTread.start();
            
            resetCount(0);	
    	}
    }

	private void jMenuItem2MousePressed(MouseEvent evt) {
		// TODO add your handling code here: 刷新Mention
		//if (newMentionsNum > 0) {
			Mention mention1 = new Mention();
			Thread mentionTread1 = new Thread(mention1);
			mentionTread1.start();
		//}
		resetCount(3);
	}

	private void jMenuItem3MousePressed(MouseEvent evt) {
		// TODO add your handling code here: 刷新Comment,
		// 删除comment后newCommentsNum无变化，但需刷新
		//if (newCommentsNum >= 0) {
			Comments comments1 = new Comments();
			Thread commentsThread1 = new Thread(comments1);
			commentsThread1.start();
		//}
		resetCount(1);
	}

	private void jMenuItem4MousePressed(MouseEvent evt) {
		// TODO add your handling code here: 刷新Follower
		//if (newFollowersNum >= 0) {
			Follower follower1 = new Follower();
			Thread followerThread1 = new Thread(follower1);
			followerThread1.start();
		//}
		resetCount(2);
	}

	private void jMenuItem5MousePressed(MouseEvent evt) {
		// TODO add your handling code here: 刷新myTweet
		MyTweet myTweet1 = new MyTweet();
		Thread myTweetThread1 = new Thread(myTweet1);
		myTweetThread1.start();
	}

	private void jMenuItem6MousePressed(MouseEvent evt) {
		// TODO add your handling code here: 刷新Fav
		Fav fav1 = new Fav();
		Thread favThread1 = new Thread(fav1);
		favThread1.start();
	}

	private void jMenuItem7MousePressed(MouseEvent evt) {
		// TODO add your handling code here: 刷新Following
		Following following1 = new Following();
		Thread followingThread1 = new Thread(following1);
		followingThread1.start();
	}
   
	private void sendButtonMouseClicked(MouseEvent evt) {// GEN-FIRST:event_sendButtonMouseClicked
		// TODO add your handling code here: 发送新Tweet

		// 测试new
		// this.checkNew();
		if (sendTextArea.getText().length() <= 140) {
			try {
				sinaWeibo.updateStatus(sendTextArea.getText());
				JOptionPane.showMessageDialog(null, "发表成功:)", "", -1);
				sendTextArea.setText("");
				MyTweet myTweet2 = new MyTweet();
				Thread myTweetThread2 = new Thread(myTweet2);
				myTweetThread2.start();
				myTweetThread2.join();
			} catch (WeiboException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				JOptionPane.showMessageDialog(null, "发表失败", "error", -1);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			JOptionPane.showMessageDialog(null, "字数过多，请修改后重新发送（不超过140字）",
					"error", -1);
		}
	}

    /**
     * 重新设置未读数
     * i=0 重置home icon
     * i=1 时resetCommentsNum
     * i=2 是resetFollowersNum
     * i=3 时resetMentionsNum
     */
    public void resetCount(int i) {
    	switch(i){
	    	case 0:
	    		bodyTabbedPane.setIconAt(0, new ImageIcon(getClass().getResource("/image/home.png")));break;
	    	case 1:	sinaWeibo.gtResetCommentsNum();
	    		bodyTabbedPane.setIconAt(3, new ImageIcon(getClass().getResource("/image/comments.png")));break;
	    	case 2:	sinaWeibo.gtResetFollowersNum();
	    		bodyTabbedPane.setIconAt(6, new ImageIcon(getClass().getResource("/image/followers.png")));break;
	    	case 3:	sinaWeibo.gtResetMentionsNum();
	    		bodyTabbedPane.setIconAt(1, new ImageIcon(getClass().getResource("/image/mention.png")));break;
    	}
    }
    
    // Variables declaration
    private JPanel aboutPanel;
    private JScrollPane aboutScrollPane;
    private JButton avatarButton1;
    // static JButton avatarButton2;
    private JTabbedPane bodyTabbedPane;
    //static JLabel commentLabel;
//    private JLabel commentLabel1;
//    private  JLabel commentLabel2;
//    private JLabel commentLabel4;
    private JPanel commentPanel;
    private JScrollPane commentScrollPane;
    private JPanel favPanel;
    private JScrollPane favScrollPane;
    // static JLabel favouriteLabel;
    private JPanel followerPanel;
    private JScrollPane followerScrollPane;
    private JLabel followingLabel;
    private JPanel followingPanel;
    private JScrollPane followingScrollPane;
    private JLabel follwerLabel;
    private JPanel headingPanel;
    private JPanel homePanel;
    private JScrollPane homeScrollPane;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTextArea jTextArea1;
    private JPanel mentionPanel;
    private JScrollPane mentionScrollPane;
    private JPanel myTweetPanel;
    private JScrollPane myTweetScrollPane;
    private JButton sendButton;
    private JPanel sendPanel;
    private JTextArea sendTextArea;
    private JPanel tweetPanel;
    // private JPanel tweetPanel1;
    // private JPanel tweetPanel2;
    // private JPanel tweetPanel4;
    private JLabel tweetsLabel;
    private JLabel usrNameLabel;
    private JButton MenuButton;
    private JPopupMenu refreshPopupMenu;
    private JMenuItem jMenuItem1;
    private JMenuItem jMenuItem2;
    private JMenuItem jMenuItem3;
    private JMenuItem jMenuItem4;
    private JMenuItem jMenuItem5;
    private JMenuItem jMenuItem6;
    private JMenuItem jMenuItem7;
    // End of variables declaration
    
	class Mention implements Runnable {

		@Override
		public void run() {
			mentionPanel = new JPanel();
			mentionPanel.setBackground(new Color(0, 214, 255));
			mentionPanel.setPreferredSize(new Dimension(420, 2905));
			Iterator<SinaTweets> mentionIterator = sinaWeibo.gtGetMentionMe()
					.iterator();
			int numOfMention = 0;
			while (mentionIterator.hasNext()) {
				SinaTweets singleTweet = mentionIterator.next();
				// SingleTweetPanel tweetPanel;
				try {
					isFavouritePanel = false;
					SingleTweetPanel tweetPanel = new SingleTweetPanel(
							sinaWeibo, singleTweet, isFavouritePanel);
					tweetPanel.setBackground(new Color(158, 238, 250));
					tweetPanel.setBounds(10, numOfMention * 145 + 5, 340, 140);
					numOfMention++;
					mentionPanel.add(tweetPanel);
					isFavouritePanel = true;
				} catch (WeiboException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
            GroupLayout mentionPanelLayout = new GroupLayout(mentionPanel);
            mentionPanel.setLayout(mentionPanelLayout);
            mentionPanelLayout.setHorizontalGroup(
                mentionPanelLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(mentionPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    //.addComponent(tweetPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(68, Short.MAX_VALUE))
            );
            mentionPanelLayout.setVerticalGroup(
                mentionPanelLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(mentionPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    //.addComponent(tweetPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(310, Short.MAX_VALUE))
            );
            mentionScrollPane.setViewportView(mentionPanel);
    	} 	
    }
    
    class MyTweet implements Runnable {
    	
		@Override
		public void run() {
			myTweetPanel = new JPanel();
			myTweetPanel.setBackground(new Color(0, 214, 255));
			myTweetPanel.setPreferredSize(new Dimension(420, 2905));
			Iterator<SinaTweets> myTweetIterator;
			try {
				myTweetIterator = sinaWeibo.getUserTimeline().iterator();
				int numOfMyTweet = 0;
				while (myTweetIterator.hasNext()) {
					SinaTweets singleTweet = myTweetIterator.next();
					// System.out.println(singleTweet.getText());
					isFavouritePanel = false;
					SingleTweetPanel tweetPanel = new SingleTweetPanel(
							sinaWeibo, singleTweet, isFavouritePanel);
					// JPanel jp1 = tweetPanel;
					tweetPanel.setBackground(new Color(158, 238, 250));
					tweetPanel.setBounds(10, numOfMyTweet * 145 + 5, 340, 140);
					numOfMyTweet++;
					myTweetPanel.add(tweetPanel);
					isFavouritePanel = true;
				}
			} catch (WeiboException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			GroupLayout myTweetPanelLayout = new GroupLayout(myTweetPanel);
	        myTweetPanel.setLayout(myTweetPanelLayout);
	        myTweetPanelLayout.setHorizontalGroup(
	            myTweetPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(myTweetPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(tweetPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(68, Short.MAX_VALUE))
	        );
	        myTweetPanelLayout.setVerticalGroup(
	            myTweetPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(myTweetPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(tweetPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(310, Short.MAX_VALUE))
	        );
	        myTweetScrollPane.setViewportView(myTweetPanel);
		}	
    }
    
    class Comments implements Runnable {

		@Override
		public void run() {
			commentPanel = new JPanel();
			commentPanel.setBackground(new Color(0, 214, 255));
			commentPanel.setPreferredSize(new Dimension(420, 2905));
			Iterator<Comment> commentToMeIterator = sinaWeibo
					.gtGetCommentsToMe().iterator();
			int numOfComment = 0;
			while (commentToMeIterator.hasNext()) {
				Comment singleComment = commentToMeIterator.next();
				isCommentToMe = true;
				SingleCommentPanel singlecommentPanel = new SingleCommentPanel(
						sinaWeibo, singleComment, isCommentToMe);
				singlecommentPanel.setBackground(new Color(158, 238, 250));
				singlecommentPanel.setBounds(10, numOfComment * 125 + 5, 340,
						120);
				numOfComment++;
				commentPanel.add(singlecommentPanel);
				isCommentToMe = false;
			}
	        
	        GroupLayout commentPanelLayout = new GroupLayout(commentPanel);
	        commentPanel.setLayout(commentPanelLayout);
	        commentPanelLayout.setHorizontalGroup(
	            commentPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(commentPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(tweetPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(68, Short.MAX_VALUE))
	        );
	        commentPanelLayout.setVerticalGroup(
	            commentPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(commentPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(tweetPanel3, GroupLayout.PREFERRED_SIZE, 145, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(305, Short.MAX_VALUE))
	        );
	        commentScrollPane.setViewportView(commentPanel);
			
		}
    	
    }
    
    class Fav implements Runnable {

		@Override
		public void run() {
			favPanel = new JPanel();
			favPanel.setBackground(new Color(0, 214, 255));
			favPanel.setPreferredSize(new Dimension(420, 2905));

			Iterator<SinaTweets> favouriteIterator = sinaWeibo.gtGetFav()
					.iterator();
			int numOfFavourite = 0;
			while (favouriteIterator.hasNext()) {
				SinaTweets singleTweet = favouriteIterator.next();
				// System.out.println(singleTweet.getText());
				try {
					isFavouritePanel = true;
					SingleTweetPanel tweetPanel = new SingleTweetPanel(
							sinaWeibo, singleTweet, isFavouritePanel);
					tweetPanel.setBackground(new Color(158, 238, 250));
					tweetPanel
							.setBounds(10, numOfFavourite * 145 + 5, 340, 140);
					numOfFavourite++;
					favPanel.add(tweetPanel);
					isFavouritePanel = false;
				} catch (WeiboException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
	        GroupLayout favPanelLayout = new GroupLayout(favPanel);
	        favPanel.setLayout(favPanelLayout);
	        favPanelLayout.setHorizontalGroup(
	            favPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(favPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(tweetPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(68, Short.MAX_VALUE))
	        );
	        favPanelLayout.setVerticalGroup(
	            favPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(favPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(tweetPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(310, Short.MAX_VALUE))
	        );
	        favScrollPane.setViewportView(favPanel);
		}    	
    }
    
    class Following implements Runnable {

		@Override
		public void run() {
			followingPanel = new JPanel();
			followingPanel.setBackground(new Color(0, 214, 255));
			followingPanel.setPreferredSize(new Dimension(420, 2905));
			Iterator<SinaUser> folowingIterator = sinaWeibo.gtGetFollowing()
					.iterator();
			int numOfFolowing = 0;
			while (folowingIterator.hasNext()) {
				SinaUser singleFriend = folowingIterator.next();
				isFollowerPanel = false;
				SingleFriendPanel friendPanel = new SingleFriendPanel(
						singleFriend, isFollowerPanel, sinaWeibo);
				friendPanel.setBackground(new Color(158, 238, 250));
				friendPanel.setBounds(10, numOfFolowing * 82 + 5, 340, 77);
				numOfFolowing++;
				followingPanel.add(friendPanel);
				isFollowerPanel = true;
			}
	        
	        GroupLayout followingPanelLayout = new GroupLayout(followingPanel);
	        followingPanel.setLayout(followingPanelLayout);
	        followingPanelLayout.setHorizontalGroup(
	            followingPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(followingPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(infoPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(68, Short.MAX_VALUE))
	        );
	        followingPanelLayout.setVerticalGroup(
	            followingPanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(followingPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                //.addComponent(infoPanel, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(376, Short.MAX_VALUE))
	        );

	        followingScrollPane.setViewportView(followingPanel);
		}		    	
    }
    
    class Follower implements Runnable {

		@Override
		public void run() {
			followerPanel = new JPanel();
			followerPanel.setBackground(new Color(0, 214, 255));
			followerPanel.setPreferredSize(new Dimension(420, 2905));
			Iterator<SinaUser> folowerIterator = sinaWeibo.gtGetFollower()
					.iterator();
			int numOfFolower = 0;

			while (folowerIterator.hasNext()) {
				SinaUser singleFriend = folowerIterator.next();
				isFollowerPanel = true;
				SingleFriendPanel friendPanel = new SingleFriendPanel(
						singleFriend, isFollowerPanel, sinaWeibo);
				friendPanel.setBackground(new Color(158, 238, 250));
				friendPanel.setBounds(10, numOfFolower * 82 + 5, 340, 77);
				numOfFolower++;
				followerPanel.add(friendPanel);
				isFollowerPanel = false;
			}
		        		        
		    GroupLayout followerPanelLayout = new GroupLayout(followerPanel);
		    followerPanel.setLayout(followerPanelLayout);
		    followerPanelLayout.setHorizontalGroup(
		        followerPanelLayout.createParallelGroup(Alignment.LEADING)
		        .addGroup(followerPanelLayout.createSequentialGroup()
		            .addContainerGap()
		            //.addComponent(infoPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
		            .addContainerGap(68, Short.MAX_VALUE))
		    );
		    followerPanelLayout.setVerticalGroup(
		        followerPanelLayout.createParallelGroup(Alignment.LEADING)
		        .addGroup(followerPanelLayout.createSequentialGroup()
		            .addContainerGap()
		            //.addComponent(infoPanel1, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)
		            .addContainerGap(376, Short.MAX_VALUE))
		    );
		    followerScrollPane.setViewportView(followerPanel);
		}
    	
    }
    
    class Home implements Runnable {

		@Override
		public void run() {
			homePanel = new JPanel();
			homePanel.setBackground(new Color(0, 214, 255));
			homePanel.setPreferredSize(new Dimension(420, 2900));
			Iterator<SinaTweets> it = sinaWeibo.gtGetAllTweets().iterator();
			int i = 0;
			boolean sign = true;

			while (it.hasNext()) {
				singleTweet = it.next();
				if (sign) {
					latestTweetId = singleTweet.getId();
					sign = false;
				}
				// SingleTweetPanel tweetPanel;
				SingleTweetPanel tweetPanel;
				try {
					isFavouritePanel = false;
					tweetPanel = new SingleTweetPanel(sinaWeibo, singleTweet,
							isFavouritePanel);
					tweetPanel.setBackground(new Color(158, 238, 250));
					tweetPanel.setBounds(10, i * 145 + 5, 340, 140);
					i++;
					homePanel.add(tweetPanel);
					isFavouritePanel = true;
				} catch (WeiboException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
	        
	        GroupLayout homePanelLayout = new GroupLayout(homePanel);
	        homePanel.setLayout(homePanelLayout);
	        homePanelLayout.setHorizontalGroup(
	            homePanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(homePanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addComponent(tweetPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(68, Short.MAX_VALUE))
	        );
	        homePanelLayout.setVerticalGroup(
	            homePanelLayout.createParallelGroup(Alignment.LEADING)
	            .addGroup(homePanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addComponent(tweetPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(310, Short.MAX_VALUE))
	        );
	        homeScrollPane.setViewportView(homePanel);			
		}    	
    }
    
	class CheckNew extends java.util.TimerTask implements Runnable {

		@Override
		public void run() {
			checkNew();
		}
		/**
		 * 检验是否有新tweet（只能显示T/F），mentions，comments，followers
		 */
		public void checkNew() {
			try {
				count = sinaWeibo.getUnread();
			} catch (WeiboException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (count.getNewTweet() == 0) {
				newTweets = false;
			} else {
				newTweets = true;
			}
			newCommentsNum = count.getComments();
			newFollowersNum = count.getFollowers();
			newMentionsNum = count.getMentions();
			try {
				myselfUser = sinaWeibo.verifyCredentials();
			} catch (WeiboException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			myTweetsNum = myselfUser.gtGetMyTweetsNum();
			myFollowersNum = myselfUser.gtGetFollowersNum();
			myFollowingsNum = myselfUser.gtGetFollowingsNum();

			followingLabel.setText("Following: " + myFollowingsNum);
			follwerLabel.setText("Follower: " + myFollowersNum);
			tweetsLabel.setText("Tweets: " + myTweetsNum);
		
			if (newTweets) {
				bodyTabbedPane.setIconAt(0, new ImageIcon(getClass()
						.getResource("/image/newhome.png")));
			}
			if (newCommentsNum > 0) {
				bodyTabbedPane.setIconAt(3, new ImageIcon(getClass()
						.getResource("/image/newcomments.png")));
			}
			if (newFollowersNum > 0) {
				bodyTabbedPane.setIconAt(6, new ImageIcon(getClass()
						.getResource("/image/newfollowers.png")));
			}
			if (newMentionsNum > 0) {
				bodyTabbedPane.setIconAt(1, new ImageIcon(getClass()
						.getResource("/image/newmention.png")));
			}
		}
	}
}
